#!/usr/bin/env python3

import json
import locale
import sys
import operator
import emails
import os
import reports

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  locale.setlocale(locale.LC_ALL, 'en_US.UTF8')
  max_revenue = {"revenue": 0}
  most_sale = {}
  year_sale = {}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    # Calculate most sales
    if item['car']['car_model'] not in most_sale.keys():
      most_sale[item['car']['car_model']] = item['total_sales']
    else:
      most_sale[item['car']['car_model']] += item['total_sales']
    # Calculate most popular car & year
    if item['car']['car_year'] not in year_sale.keys():
      year_sale[item['car']['car_year']] = item['total_sales']
    else:
      year_sale[item['car']['car_year']] += item['total_sales']
  # Find out max sale and the year
  max_sale = max(most_sale.items(), key=operator.itemgetter(1))[0]
  max_year = max(year_sale.items(), key=operator.itemgetter(1))[0]
  
  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: {}".format(
      max_sale, most_sale[max_sale]),
    "The most popular year was {} with {} sales.".format(
      max_year, year_sale[max_year])
  ]
  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("../car_sales.json")
  summary = process_data(data)
  table_data = cars_dict_to_table(data)
  print(summary)
  # Turn this into a PDF report
  
  reports.generate("/tmp/cars.pdf", "A Complete Summary of car sales", summary[0]+"<br/>"+summary[1]+"<br/>"+summary[2], table_data)
  
  # Send the PDF report as an email attachment
  sender = "automation@example.com"
  receiver = "{}@example.com".format(os.environ.get('USER'))
  subject = "Sales summary for last month"
  body = "A Complete Summary of car sales\n\n"+summary[0]+"\n"+summary[1]+"\n"+summary[2]+"\n"
  message = emails.generate(sender, receiver, subject, body, "/tmp/cars.pdf")
  emails.send(message)

if __name__ == "__main__":
  main(sys.argv)
